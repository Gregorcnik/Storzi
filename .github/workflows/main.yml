name: Deploy Patterns

on:
  - push
  - workflow_dispatch

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest

    outputs:
      dirs: ${{ steps.patterns.outputs.dirs }}

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: List all patterns
        id: patterns
        run: |
          dirs=$(find patterns -mindepth 1 -maxdepth 1 -type d -printf '"%P"\n' | jq -s .)
          echo "dirs=$dirs" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy (${{ matrix.pattern }})
    runs-on: ubuntu-latest

    needs: setup

    strategy:
      fail-fast: false
      matrix:
        pattern: ${{ fromJson(needs.setup.outputs.patterns) }}

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Docker registry
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ${{ vars.DOCKER_REGISTRY }}

      - name: Validate the pattern
        run: |
          cd patterns/${{ matrix.pattern }}

          # Parse the config file
          name=$(yq e '.name' config.yml)
          description=$(yq e '.description' config.yml)
          author=$(yq e '.author' config.yml)
          school=$(yq e '.school' config.yml)
          duration=$(yq e '.duration' config.yml)

          # Validate that the name is provided
          if [ "$name" = "null" ]; then
            echo "The name field is required"
            exit 1
          fi

          # Validate that the duration (if provided) is a number
          if [ "$duration" != "null" ] && ! [[ "$duration" =~ ^[0-9]+$ ]]; then
            echo "The duration field must be a number if provided"
            exit 1
          fi

      - name: Build the pattern
        run: |
          cd patterns/${{ matrix.pattern }}
          docker build --tag "${{ vars.DOCKER_REGISTRY }}/${{ matrix.pattern }}" .

      - name: Push the pattern to the registry
        if: github.ref == 'refs/heads/main'
        run: |
          cd patterns/${{ matrix.pattern }}
          docker push "${{ vars.DOCKER_REGISTRY }}/${{ matrix.pattern }}"

      - name: Submit the pattern to the server
        if: github.ref == 'refs/heads/main'
        run: |
          cd patterns/${{ matrix.pattern }}

          # Parse the config file
          name=$(yq e '.name' config.yml)
          description=$(yq e '.description' config.yml)
          author=$(yq e '.author' config.yml)
          school=$(yq e '.school' config.yml)
          duration=$(yq e '.duration' config.yml)

          # Prepare the payload
          payload=$(jq -n \
            --arg identifier "${{ matrix.pattern }}" \
            --arg name "$name" \
            --arg description "$description" \
            --arg author "$author" \
            --arg school "$school" \
            --argjson duration "${duration}" \
            --arg source "https://github.com/${{ github.repository }}/tree/${{ github.sha }}/patterns/${{ matrix.pattern }}" \
            --arg docker "${{ vars.DOCKER_REGISTRY }}/${{ matrix.pattern }}" \
            '{identifier: $identifier, name: $name, description: $description, author: $author, school: $school, duration: $duration, source: $source, docker: $docker}')

          # Submit the payload
          response=$(curl -s -o response.txt -w "%{http_code}" -X POST \
            -H "Authorization: Token ${{ secrets.JELKOB_TOKEN }}" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -d "$payload" \
            ${{ vars.JELKOB_URL }})

          # Check the response
          if [[ "$response" -lt 200 || "$response" -ge 300 ]]; then
            echo "Error: Failed to submit the pattern.\n"
            echo "Status code:\n$response\n"
            echo "Response:"
            cat response.txt
            exit 1
          fi
